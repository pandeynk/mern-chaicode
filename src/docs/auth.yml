// src/docs/auth.yaml
components:
  schemas:
    User:
      type: object
      required:
        - email
        - password
      properties:
        id:
          type: integer
          description: The auto-generated id of the user
        email:
          type: string
          format: email
          description: The user email
        password:
          type: string
          format: password
          description: The user password (hashed)
        createdAt:
          type: string
          format: date-time
          description: The date the user was created

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token for authentication

    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          format: password

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: User registered successfully

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: Internal server error

paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        400:
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login to the system
      description: Login with email and password to get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/protected:
    get:
      tags:
        - Protected Routes
      summary: Access a protected route
      description: Route that requires authentication
      security:
        - bearerAuth: []
      responses:
        200:
          description: Access granted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You have accessed a protected route!
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                        format: email
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/health:
    get:
      tags:
        - System
      summary: Health check
      description: Endpoint to check API health
      responses:
        200:
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  uptime:
                    type: number
                    example: 123.45

  /api/data:
    get:
      tags:
        - Data
      summary: Get data
      description: Endpoint to get data with caching
      responses:
        200:
          description: Data with timestamp
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: This is the data from the database
                  timestamp:
                    type: number
                    example: 1634567890123